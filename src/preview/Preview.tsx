import React, {Component, ReactNode} from 'react';
import Button from "@material-ui/core/Button";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import PreviewableImage from "../models/PreviewableImage";

interface PreviewState {

  /** The currently focused/displayed image. */
  selected: PreviewableImage | undefined;
}

export interface PreviewProps {

  /** An array of all previewable images displayed. */
  images: PreviewableImage[];

  /** The callback to remove an image by index from the image array. */
  handleRemoveImage: (index: number) => void;
}

/** The navigation bar for this application. */
export default class Preview extends Component<PreviewProps, PreviewState> {

  public constructor(props: PreviewProps) {
    super(props);

    if (props.images) {
      this.state = {
        selected: props.images[0]
      };
    }
  }

  public render(): ReactNode {
    const {handleRemoveImage} = this.props;
    const {selected} = this.state;

    const listItems: ReactNode[] = this.props.images.map((image: PreviewableImage, index: number) => {
      return (
        <li className="preview-image" key={image.id}>
          <img
            className="checkered-background"
            src={image.data}
            alt="Preview generated by ImageCaster."
            onClick={() => handleRemoveImage(index)}
          />
        </li>
      );
    });

    return (
      <div>
        <div>
          { selected &&
            <div>
              <img src={selected.data} alt='Preview of the input with the filter and geometry specified.'/>
              <Button className="dialog-button"
                      href={selected.data}
                      startIcon={<FontAwesomeIcon icon='download'/>}
                      aria-label="download"
                      download>
                Download
              </Button>
              <Button className="dialog-button"
                      startIcon={<FontAwesomeIcon icon='times'/>}
                      onClick={() => this.setState({selected: undefined})}
                      aria-label="close">
                Close
              </Button>
            </div>
          }
          { !selected &&
            <p>There is no focused preview to display right now.</p>
          }
        </div>
        <div>
          {listItems}
        </div>
      </div>
    );
  }
}
